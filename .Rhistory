# For-Loop over omitable components
for(temp_ls in bst_null_vec){
# Omit crch-model components
est_pp[[temp_name]][["emos_bst_train"]][[temp_ls]] <- NULL
}
}
}
# List for saving
ls_save <- c("pred_pp")
# Include estimation object
if(is.element(temp_meth, c("emos_bst", "emos_sea", "mbm_sea", "qrf_loc"))){
ls_save <- c(ls_save, "est_pp") }
# Save data
save(file = paste0(data_pp_path, temp_meth, "_step", i_step, ".RData"),
list = ls_save)
bst_null_vec <- c("model", "loglikpath", "coefpath", "residuals", "fitted.values", "df", "standardize",
"cens", "control", "offset", "n", "nobs", "iterations", "stepsize", "mstop", "mstopopt",
# "call", "loglik", "weights",
"formula", "levels", "contrasts",
"terms")
est_pp <- est_pp0
# Reduce size for EMOS-GB
if(is.element(temp_meth, c("emos_bst"))){
# For-Loop over elements
for(temp_name in names(est_pp)){
# est_pp[[temp_name]][["emos_bst_train"]] <- NULL
# For-Loop over omitable components
for(temp_ls in bst_null_vec){
# Omit crch-model components
est_pp[[temp_name]][["emos_bst_train"]][[temp_ls]] <- NULL
}
}
}
# List for saving
ls_save <- c("pred_pp")
# Include estimation object
if(is.element(temp_meth, c("emos_bst", "emos_sea", "mbm_sea", "qrf_loc"))){
ls_save <- c(ls_save, "est_pp") }
# Save data
save(file = paste0(data_pp_path, temp_meth, "_step", i_step, ".RData"),
list = ls_save)
temp <- est_pp$hr0_step0_loc10004$emos_bst_train
bst_null_vec <- c("model", "loglikpath", "coefpath", "residuals", "fitted.values", "df", "standardize",
"cens", "control", "offset", "n", "nobs", "iterations", "stepsize", "mstop", "mstopopt",
# "call", "loglik", "weights",
"formula",
# "levels", "contrasts",
"terms")
est_pp <- est_pp0
# Reduce size for EMOS-GB
if(is.element(temp_meth, c("emos_bst"))){
# For-Loop over elements
for(temp_name in names(est_pp)){
# est_pp[[temp_name]][["emos_bst_train"]] <- NULL
# For-Loop over omitable components
for(temp_ls in bst_null_vec){
# Omit crch-model components
est_pp[[temp_name]][["emos_bst_train"]][[temp_ls]] <- NULL
}
}
}
# List for saving
ls_save <- c("pred_pp")
# Include estimation object
if(is.element(temp_meth, c("emos_bst", "emos_sea", "mbm_sea", "qrf_loc"))){
ls_save <- c(ls_save, "est_pp") }
# Save data
save(file = paste0(data_pp_path, temp_meth, "_step", i_step, ".RData"),
list = ls_save)
bst_null_vec <- c("model", "loglikpath", "coefpath", "residuals", "fitted.values", "df", "standardize",
"cens", "control", "offset",
# "n", "nobs", "iterations", "stepsize", "mstop", "mstopopt",
# "call", "loglik", "weights", "levels", "contrasts",
"formula", "terms")
est_pp <- est_pp0
# Reduce size for EMOS-GB
if(is.element(temp_meth, c("emos_bst"))){
# For-Loop over elements
for(temp_name in names(est_pp)){
# est_pp[[temp_name]][["emos_bst_train"]] <- NULL
# For-Loop over omitable components
for(temp_ls in bst_null_vec){
# Omit crch-model components
est_pp[[temp_name]][["emos_bst_train"]][[temp_ls]] <- NULL
}
}
}
# List for saving
ls_save <- c("pred_pp")
# Include estimation object
if(is.element(temp_meth, c("emos_bst", "emos_sea", "mbm_sea", "qrf_loc"))){
ls_save <- c(ls_save, "est_pp") }
# Save data
save(file = paste0(data_pp_path, temp_meth, "_step", i_step, ".RData"),
list = ls_save)
temp0 <- est_pp$hr0_step0_loc10004$emos_bst_train
temp0 <- est_pp0$hr0_step0_loc10004$emos_bst_train
bst_null_vec <- c("model", "loglikpath", "coefpath", "residuals", "fitted.values", "df", "standardize",
# "cens", "control", "offset",
# "n", "nobs", "iterations", "stepsize", "mstop", "mstopopt",
# "call", "loglik", "weights", "levels", "contrasts",
"formula", "terms")
est_pp <- est_pp0
# Reduce size for EMOS-GB
if(is.element(temp_meth, c("emos_bst"))){
# For-Loop over elements
for(temp_name in names(est_pp)){
# est_pp[[temp_name]][["emos_bst_train"]] <- NULL
# For-Loop over omitable components
for(temp_ls in bst_null_vec){
# Omit crch-model components
est_pp[[temp_name]][["emos_bst_train"]][[temp_ls]] <- NULL
}
}
}
# List for saving
ls_save <- c("pred_pp")
# Include estimation object
if(is.element(temp_meth, c("emos_bst", "emos_sea", "mbm_sea", "qrf_loc"))){
ls_save <- c(ls_save, "est_pp") }
# Save data
save(file = paste0(data_pp_path, temp_meth, "_step", i_step, ".RData"),
list = ls_save)
bst_null_vec <- c("model", "loglikpath", "coefpath",
# "residuals", "fitted.values", "df", "standardize",
# "cens", "control", "offset",
# "n", "nobs", "iterations", "stepsize", "mstop", "mstopopt",
# "call", "loglik", "weights", "levels", "contrasts",
"formula", "terms")
est_pp <- est_pp0
# Reduce size for EMOS-GB
if(is.element(temp_meth, c("emos_bst"))){
# For-Loop over elements
for(temp_name in names(est_pp)){
# est_pp[[temp_name]][["emos_bst_train"]] <- NULL
# For-Loop over omitable components
for(temp_ls in bst_null_vec){
# Omit crch-model components
est_pp[[temp_name]][["emos_bst_train"]][[temp_ls]] <- NULL
}
}
}
# List for saving
ls_save <- c("pred_pp")
# Include estimation object
if(is.element(temp_meth, c("emos_bst", "emos_sea", "mbm_sea", "qrf_loc"))){
ls_save <- c(ls_save, "est_pp") }
# Save data
save(file = paste0(data_pp_path, temp_meth, "_step", i_step, ".RData"),
list = ls_save)
bst_null_vec <- c(
# "model", "loglikpath", "coefpath",
# "residuals", "fitted.values", "df", "standardize",
# "cens", "control", "offset",
# "n", "nobs", "iterations", "stepsize", "mstop", "mstopopt",
# "call", "loglik", "weights", "levels", "contrasts",
"formula", "terms"
)
est_pp <- est_pp0
# Reduce size for EMOS-GB
if(is.element(temp_meth, c("emos_bst"))){
# For-Loop over elements
for(temp_name in names(est_pp)){
# est_pp[[temp_name]][["emos_bst_train"]] <- NULL
# For-Loop over omitable components
for(temp_ls in bst_null_vec){
# Omit crch-model components
est_pp[[temp_name]][["emos_bst_train"]][[temp_ls]] <- NULL
}
}
}
# List for saving
ls_save <- c("pred_pp")
# Include estimation object
if(is.element(temp_meth, c("emos_bst", "emos_sea", "mbm_sea", "qrf_loc"))){
ls_save <- c(ls_save, "est_pp") }
# Save data
save(file = paste0(data_pp_path, temp_meth, "_step", i_step, ".RData"),
list = ls_save)
bst_null_vec <- c(
"model",
# "loglikpath",
# "coefpath",
# "residuals", "fitted.values", "df", "standardize",
# "cens", "control", "offset",
# "n", "nobs", "iterations", "stepsize", "mstop", "mstopopt",
# "call", "loglik", "weights", "levels", "contrasts",
"formula", "terms"
)
est_pp <- est_pp0
# Reduce size for EMOS-GB
if(is.element(temp_meth, c("emos_bst"))){
# For-Loop over elements
for(temp_name in names(est_pp)){
# est_pp[[temp_name]][["emos_bst_train"]] <- NULL
# For-Loop over omitable components
for(temp_ls in bst_null_vec){
# Omit crch-model components
est_pp[[temp_name]][["emos_bst_train"]][[temp_ls]] <- NULL
}
}
}
# List for saving
ls_save <- c("pred_pp")
# Include estimation object
if(is.element(temp_meth, c("emos_bst", "emos_sea", "mbm_sea", "qrf_loc"))){
ls_save <- c(ls_save, "est_pp") }
# Save data
save(file = paste0(data_pp_path, temp_meth, "_step", i_step, ".RData"),
list = ls_save)
temp <- est_pp$hr0_step0_loc10004$emos_bst_train
bst_null_vec <- c(
"model",
# "formula",
"terms"
)
est_pp <- est_pp0
# Reduce size for EMOS-GB
if(is.element(temp_meth, c("emos_bst"))){
# For-Loop over elements
for(temp_name in names(est_pp)){
# est_pp[[temp_name]][["emos_bst_train"]] <- NULL
# For-Loop over omitable components
for(temp_ls in bst_null_vec){
# Omit crch-model components
est_pp[[temp_name]][["emos_bst_train"]][[temp_ls]] <- NULL
}
}
}
# List for saving
ls_save <- c("pred_pp")
# Include estimation object
if(is.element(temp_meth, c("emos_bst", "emos_sea", "mbm_sea", "qrf_loc"))){
ls_save <- c(ls_save, "est_pp") }
# Save data
save(file = paste0(data_pp_path, temp_meth, "_step", i_step, ".RData"),
list = ls_save)
#### Postprocessing data ####
# Components to omit for boosting
bst_null_vec <- c("model", "formula", "terms")
temp <- est_pp$hr0_step0_loc10004$emos_bst_train
for(temp_ls_name in bst_null_vec){ temp[[temp_ls_name]] <- NULL }
bla <- predict(object = temp, newdata = df_sub, type = "parameter")
temp <- est_pp0$hr0_step0_loc10004$emos_bst_train
for(temp_ls_name in bst_null_vec){ temp[[temp_ls_name]] <- NULL }
bla <- predict(object = temp, newdata = df_sub, type = "parameter")
est_pp <- est_pp0
# Reduce size for EMOS-GB
if(is.element(temp_meth, c("emos_bst"))){
# For-Loop over elements
for(temp_name in names(est_pp)){
# est_pp[[temp_name]][["emos_bst_train"]] <- NULL
# For-Loop over omitable components
for(temp_ls in bst_null_vec){
# Omit crch-model components
est_pp[[temp_name]][["emos_bst_train"]][[temp_ls]] <- NULL
}
}
}
# List for saving
ls_save <- c("pred_pp")
# Include estimation object
if(is.element(temp_meth, c("emos_bst", "emos_sea", "mbm_sea", "qrf_loc"))){
ls_save <- c(ls_save, "est_pp") }
# Save data
save(file = paste0(data_pp_path, temp_meth, "_step", i_step, ".RData"),
list = ls_save)
est_pp0$hr0_step0_loc10004$emos_bst_train$formula
#### Housekeeping ####
rm(list=ls())
gc()
#### Settings ####
# Load package
library(lubridate)
library(dplyr)
# Path of data
data_path <- "E:/pp_paper/"
# Path of ensemble data
data_ens_path <- paste0(data_path, "ens_data/")
data_pp_path <- paste0(data_path, "pp_data/")
data_fc_path <- paste0(data_path, "pp_forecasts/")
#### Initialization ####
# Postprocessing methods
pp_meths <- c("bqn", "drn", "emos_bst", "emos_sea", "hen", "idr", "mbm_sea", "qrf_loc")
# # Names to save with
# pp_meths_new <- c("bqn" = "bqn",
#                   "drn" = "drn",
#                   "emos_bst" = "emos_gb",
#                   "emos_sea" = "emos",
#                   "hen" = "hen",
#                   "idr" = "idr",
#                   "mbm_sea" = "mbm",
#                   "qrf_loc" = "qrf")
#### Functions ####
# # Change VMAX ensemble names
# fn_vmax <- function(x){ gsub(x = x, pattern = "ens_", replacement = "VMAX_") }
bst_null_vec <- c("model", "formula", "terms")
# For-Loop over forecast methods
for(temp_meth in pp_meths){
# Skip
if(temp_meth != "emos_bst"){ next }
# For-Loop over forecast steps
for(i_step in 0:21){
# Load data
load(paste0(data_pp_path, "pp_", temp_meth, "_hr0_step", i_step, ".RData"))
# Reduce size for EMOS-GB
if(is.element(temp_meth, c("emos_bst"))){
# For-Loop over elements
for(temp_name in names(est_pp)){
# For-Loop over components to omit
for(temp_ls in bst_null_vec){
# Omit crch-model components
est_pp[[temp_name]][["emos_bst_train"]][[temp_ls]] <- NULL
}
}
}
# List for saving
ls_save <- c("pred_pp")
# Include estimation object
if(is.element(temp_meth, c("emos_bst", "emos_sea", "mbm_sea", "qrf_loc"))){
ls_save <- c(ls_save, "est_pp") }
# Save data
save(file = paste0(data_pp_path, temp_meth, "_step", i_step, ".RData"),
list = ls_save)
}
}
# Delete data
rm(est_pp, pred_pp)
gc()
exp(4)
exp(7)
exp(9)
exp(10)
exp(11)
load("E:/wind_gust_data/wind_gust_data/pp_data/epc_data.RData")
load("E:/W2W_C5/feature_pp/member/ramefi_probs/ramefi_member_probs_init0_step3.RData")
View(df_probs)
load("E:/W2W_C5/feature_pp/member/ramefi_data/ramefi_member_preds_init0_step3.RData")
View(df_pred)
load("E:/W2W_C5/feature_pp/member/ramefi_probs/ramefi_member_probs_init0_step3.RData")
View(df_probs)
range(init_TM)
range(df_pred$init_tm)
length(unique(df_pred$location))
6*81+2*17
5*81+3*17
4*81+4*17
520/7
456/7
392/7
#### Initiation ####
# Path to of CIENS data
data_path <- "F:/W2W_C5/publication_data/"
# Path to Github repository functions
git_path <- "C:/Users/schulz/Documents/GitHub/CIENS/"
# Load functions
setwd(git_path)
source(file = paste0(git_path, "functions.R"))
# Load additional data
load(file = paste0(git_path, "ciens_meta_data.RData"))
# Load packages
library(lubridate)
library(dplyr)
library(ncdf4)
#### Data set composition ####
# Define initialization times
tm_vec <- init_vec[year(init_vec) == 2016]
## CIENS: Generation of exemplary data frame
#### Initiation ####
# Path to of CIENS data
data_path <- "F:/W2W_C5/publication_data/"
# Path to Github repository functions
git_path <- "C:/Users/schulz/Documents/GitHub/CIENS/"
# Load functions
setwd(git_path)
source(file = paste0(git_path, "functions.R"))
# Load additional data
load(file = paste0(git_path, "ciens_meta_data.RData"))
# Load packages
library(lubridate)
library(dplyr)
library(ncdf4)
#### Data set composition ####
# Define initialization times
tm_vec <- init_vec[year(init_vec) == 2016]
# Define variables of interest
met_vars <- c("VMAX_10M", "VMAX_10M_LS_S", "T_G")
obs_vars <- c("wind_speed_of_gusts", "air_temperature")
# Generate data frame for multiple initialization times
df <- bind_rows(lapply(tm_vec, function(x) get_init(tm = x,
dir_path = data_path,
met_vars = met_vars,
obs_vars = obs_vars,
location_vec = loc_data[1:5, "station_id"],
step_vec = c(12:14),
ens_vec = c(1:5))))
location_vec = loc_data[1:5, "station_id"]
step_vec = c(12:14)
ens_vec = c(1:5)
dir_path = data_path
tm <- tm_vec[1]
#### Initiation ####
# Load package
library(ncdf4)
library(dplyr)
library(lubridate)
# Path to observational data
obs_path <- paste0(dir_path, "observations/")
# Path forecast files
fc_path <- paste0(dir_path, "run", hour(tm), "/")
# Get name of forecast ncdf file
temp_file <- paste0(fc_path, year(tm), sprintf("%02d", month(tm)), "/grib_", time2str(tm), ".nc")
# Open corresponding netCDF
fc_nc <- nc_open(temp_file)
# Get locations
fc_loc_vec <- ncvar_get(nc = fc_nc,
varid = "loc")
# Location default
if(is.null(location_vec)){ location_vec <- fc_loc_vec }
location_vec = loc_data$station_id[1:5]
# Generate data frame for multiple initialization times
df <- bind_rows(lapply(tm_vec, function(x) get_init(tm = x,
dir_path = data_path,
met_vars = met_vars,
obs_vars = obs_vars,
location_vec = loc_data$station_id[1:5],
step_vec = c(12:14),
ens_vec = c(1:5))))
source(file = paste0(git_path, "functions.R"))
# Generate data frame for multiple initialization times
df <- bind_rows(lapply(tm_vec, function(x) get_init(tm = x,
dir_path = data_path,
met_vars = met_vars,
obs_vars = obs_vars,
location_vec = loc_data$station_id[1:5],
step_vec = c(12:14),
ens_vec = c(1:5))))
obs_vars
obs_var_vec
# Define variables of interest
met_vars <- c("VMAX_10M", "VMAX_10M_LS_S", "T_G")
obs_vars <- c("wind_speed_of_gust", "air_temperature")
# Generate data frame for multiple initialization times
df <- bind_rows(lapply(tm_vec, function(x) get_init(tm = x,
dir_path = data_path,
met_vars = met_vars,
obs_vars = obs_vars,
location_vec = loc_data$station_id[1:5],
step_vec = c(12:14),
ens_vec = c(1:5))))
#### Initiation ####
# Path to of CIENS data
data_path <- "F:/W2W_C5/publication_data/"
# Path to Github repository functions
git_path <- "C:/Users/schulz/Documents/GitHub/CIENS/"
# Load functions
setwd(git_path)
source(file = paste0(git_path, "functions.R"))
# Load additional data
load(file = paste0(git_path, "ciens_meta_data.RData"))
# Load packages
library(lubridate)
library(dplyr)
library(ncdf4)
#### Data set composition ####
# Define initialization times
tm_vec <- init_vec[year(init_vec) == 2016]
# Define variables of interest
met_vars <- c("VMAX_10M", "VMAX_10M_LS_S", "T_G")
obs_vars <- c("wind_speed_of_gust", "air_temperature")
# Generate data frame for multiple initialization times
df <- bind_rows(lapply(tm_vec, function(x) get_init(tm = x,
dir_path = data_path,
met_vars = met_vars,
obs_vars = obs_vars,
location_vec = loc_data$station_id[1:5],
step_vec = c(12:14),
ens_vec = c(1:5))))
df <- lapply(tm_vec, function(x) get_init(tm = x,
dir_path = data_path,
met_vars = met_vars,
obs_vars = obs_vars,
location_vec = loc_data$station_id[1:5],
step_vec = c(12:14),
ens_vec = c(1:5)))
df_ls <- df
df <- bind_rows(df_ls)
summary(df_ls[732])
summary(df_ls[[732]])
summary(df_ls[[731]])
tm <- init_vec[1]
tm
tm <- tm_vec[length(tm_vec)]
tm
tm_tm + hours(step_vec)
tm + hours(step_vec)
year(tm + hours(step_vec))
unique(year(tm + hours(step_vec)))
source(file = paste0(git_path, "functions.R"))
df <- lapply(tm_vec, function(x) get_init(tm = x,
dir_path = data_path,
met_vars = met_vars,
obs_vars = obs_vars,
location_vec = loc_data$station_id[1:3],
step_vec = c(11:13)))
df_ls <- df
df <- bind_rows(df_ls)
#### Ensemble histogram, scores, ensemble mean ####
# Calculate ensemble mean and standard deviation
temp_var <- "VMAX_10M"
df[[paste0(temp_var, "_mean")]] <- rowMeans(df[,paste0(temp_var, "_", ens_vec)])
df[[paste0(temp_var, "_sd")]] <- apply(df[,paste0(temp_var, "_", ens_vec)], 1, sd)
