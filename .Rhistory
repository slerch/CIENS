}
# List for saving
ls_save <- c("pred_pp")
# Include estimation object
if(is.element(temp_meth, c("emos_bst", "emos_sea", "mbm_sea", "qrf_loc"))){
ls_save <- c(ls_save, "est_pp") }
# Save data
save(file = paste0(data_pp_path, temp_meth, "_step", i_step, ".RData"),
list = ls_save)
temp0 <- est_pp$hr0_step0_loc10004$emos_bst_train
temp0 <- est_pp0$hr0_step0_loc10004$emos_bst_train
bst_null_vec <- c("model", "loglikpath", "coefpath", "residuals", "fitted.values", "df", "standardize",
# "cens", "control", "offset",
# "n", "nobs", "iterations", "stepsize", "mstop", "mstopopt",
# "call", "loglik", "weights", "levels", "contrasts",
"formula", "terms")
est_pp <- est_pp0
# Reduce size for EMOS-GB
if(is.element(temp_meth, c("emos_bst"))){
# For-Loop over elements
for(temp_name in names(est_pp)){
# est_pp[[temp_name]][["emos_bst_train"]] <- NULL
# For-Loop over omitable components
for(temp_ls in bst_null_vec){
# Omit crch-model components
est_pp[[temp_name]][["emos_bst_train"]][[temp_ls]] <- NULL
}
}
}
# List for saving
ls_save <- c("pred_pp")
# Include estimation object
if(is.element(temp_meth, c("emos_bst", "emos_sea", "mbm_sea", "qrf_loc"))){
ls_save <- c(ls_save, "est_pp") }
# Save data
save(file = paste0(data_pp_path, temp_meth, "_step", i_step, ".RData"),
list = ls_save)
bst_null_vec <- c("model", "loglikpath", "coefpath",
# "residuals", "fitted.values", "df", "standardize",
# "cens", "control", "offset",
# "n", "nobs", "iterations", "stepsize", "mstop", "mstopopt",
# "call", "loglik", "weights", "levels", "contrasts",
"formula", "terms")
est_pp <- est_pp0
# Reduce size for EMOS-GB
if(is.element(temp_meth, c("emos_bst"))){
# For-Loop over elements
for(temp_name in names(est_pp)){
# est_pp[[temp_name]][["emos_bst_train"]] <- NULL
# For-Loop over omitable components
for(temp_ls in bst_null_vec){
# Omit crch-model components
est_pp[[temp_name]][["emos_bst_train"]][[temp_ls]] <- NULL
}
}
}
# List for saving
ls_save <- c("pred_pp")
# Include estimation object
if(is.element(temp_meth, c("emos_bst", "emos_sea", "mbm_sea", "qrf_loc"))){
ls_save <- c(ls_save, "est_pp") }
# Save data
save(file = paste0(data_pp_path, temp_meth, "_step", i_step, ".RData"),
list = ls_save)
bst_null_vec <- c(
# "model", "loglikpath", "coefpath",
# "residuals", "fitted.values", "df", "standardize",
# "cens", "control", "offset",
# "n", "nobs", "iterations", "stepsize", "mstop", "mstopopt",
# "call", "loglik", "weights", "levels", "contrasts",
"formula", "terms"
)
est_pp <- est_pp0
# Reduce size for EMOS-GB
if(is.element(temp_meth, c("emos_bst"))){
# For-Loop over elements
for(temp_name in names(est_pp)){
# est_pp[[temp_name]][["emos_bst_train"]] <- NULL
# For-Loop over omitable components
for(temp_ls in bst_null_vec){
# Omit crch-model components
est_pp[[temp_name]][["emos_bst_train"]][[temp_ls]] <- NULL
}
}
}
# List for saving
ls_save <- c("pred_pp")
# Include estimation object
if(is.element(temp_meth, c("emos_bst", "emos_sea", "mbm_sea", "qrf_loc"))){
ls_save <- c(ls_save, "est_pp") }
# Save data
save(file = paste0(data_pp_path, temp_meth, "_step", i_step, ".RData"),
list = ls_save)
bst_null_vec <- c(
"model",
# "loglikpath",
# "coefpath",
# "residuals", "fitted.values", "df", "standardize",
# "cens", "control", "offset",
# "n", "nobs", "iterations", "stepsize", "mstop", "mstopopt",
# "call", "loglik", "weights", "levels", "contrasts",
"formula", "terms"
)
est_pp <- est_pp0
# Reduce size for EMOS-GB
if(is.element(temp_meth, c("emos_bst"))){
# For-Loop over elements
for(temp_name in names(est_pp)){
# est_pp[[temp_name]][["emos_bst_train"]] <- NULL
# For-Loop over omitable components
for(temp_ls in bst_null_vec){
# Omit crch-model components
est_pp[[temp_name]][["emos_bst_train"]][[temp_ls]] <- NULL
}
}
}
# List for saving
ls_save <- c("pred_pp")
# Include estimation object
if(is.element(temp_meth, c("emos_bst", "emos_sea", "mbm_sea", "qrf_loc"))){
ls_save <- c(ls_save, "est_pp") }
# Save data
save(file = paste0(data_pp_path, temp_meth, "_step", i_step, ".RData"),
list = ls_save)
temp <- est_pp$hr0_step0_loc10004$emos_bst_train
bst_null_vec <- c(
"model",
# "formula",
"terms"
)
est_pp <- est_pp0
# Reduce size for EMOS-GB
if(is.element(temp_meth, c("emos_bst"))){
# For-Loop over elements
for(temp_name in names(est_pp)){
# est_pp[[temp_name]][["emos_bst_train"]] <- NULL
# For-Loop over omitable components
for(temp_ls in bst_null_vec){
# Omit crch-model components
est_pp[[temp_name]][["emos_bst_train"]][[temp_ls]] <- NULL
}
}
}
# List for saving
ls_save <- c("pred_pp")
# Include estimation object
if(is.element(temp_meth, c("emos_bst", "emos_sea", "mbm_sea", "qrf_loc"))){
ls_save <- c(ls_save, "est_pp") }
# Save data
save(file = paste0(data_pp_path, temp_meth, "_step", i_step, ".RData"),
list = ls_save)
#### Postprocessing data ####
# Components to omit for boosting
bst_null_vec <- c("model", "formula", "terms")
temp <- est_pp$hr0_step0_loc10004$emos_bst_train
for(temp_ls_name in bst_null_vec){ temp[[temp_ls_name]] <- NULL }
bla <- predict(object = temp, newdata = df_sub, type = "parameter")
temp <- est_pp0$hr0_step0_loc10004$emos_bst_train
for(temp_ls_name in bst_null_vec){ temp[[temp_ls_name]] <- NULL }
bla <- predict(object = temp, newdata = df_sub, type = "parameter")
est_pp <- est_pp0
# Reduce size for EMOS-GB
if(is.element(temp_meth, c("emos_bst"))){
# For-Loop over elements
for(temp_name in names(est_pp)){
# est_pp[[temp_name]][["emos_bst_train"]] <- NULL
# For-Loop over omitable components
for(temp_ls in bst_null_vec){
# Omit crch-model components
est_pp[[temp_name]][["emos_bst_train"]][[temp_ls]] <- NULL
}
}
}
# List for saving
ls_save <- c("pred_pp")
# Include estimation object
if(is.element(temp_meth, c("emos_bst", "emos_sea", "mbm_sea", "qrf_loc"))){
ls_save <- c(ls_save, "est_pp") }
# Save data
save(file = paste0(data_pp_path, temp_meth, "_step", i_step, ".RData"),
list = ls_save)
est_pp0$hr0_step0_loc10004$emos_bst_train$formula
#### Housekeeping ####
rm(list=ls())
gc()
#### Settings ####
# Load package
library(lubridate)
library(dplyr)
# Path of data
data_path <- "E:/pp_paper/"
# Path of ensemble data
data_ens_path <- paste0(data_path, "ens_data/")
data_pp_path <- paste0(data_path, "pp_data/")
data_fc_path <- paste0(data_path, "pp_forecasts/")
#### Initialization ####
# Postprocessing methods
pp_meths <- c("bqn", "drn", "emos_bst", "emos_sea", "hen", "idr", "mbm_sea", "qrf_loc")
# # Names to save with
# pp_meths_new <- c("bqn" = "bqn",
#                   "drn" = "drn",
#                   "emos_bst" = "emos_gb",
#                   "emos_sea" = "emos",
#                   "hen" = "hen",
#                   "idr" = "idr",
#                   "mbm_sea" = "mbm",
#                   "qrf_loc" = "qrf")
#### Functions ####
# # Change VMAX ensemble names
# fn_vmax <- function(x){ gsub(x = x, pattern = "ens_", replacement = "VMAX_") }
bst_null_vec <- c("model", "formula", "terms")
# For-Loop over forecast methods
for(temp_meth in pp_meths){
# Skip
if(temp_meth != "emos_bst"){ next }
# For-Loop over forecast steps
for(i_step in 0:21){
# Load data
load(paste0(data_pp_path, "pp_", temp_meth, "_hr0_step", i_step, ".RData"))
# Reduce size for EMOS-GB
if(is.element(temp_meth, c("emos_bst"))){
# For-Loop over elements
for(temp_name in names(est_pp)){
# For-Loop over components to omit
for(temp_ls in bst_null_vec){
# Omit crch-model components
est_pp[[temp_name]][["emos_bst_train"]][[temp_ls]] <- NULL
}
}
}
# List for saving
ls_save <- c("pred_pp")
# Include estimation object
if(is.element(temp_meth, c("emos_bst", "emos_sea", "mbm_sea", "qrf_loc"))){
ls_save <- c(ls_save, "est_pp") }
# Save data
save(file = paste0(data_pp_path, temp_meth, "_step", i_step, ".RData"),
list = ls_save)
}
}
# Delete data
rm(est_pp, pred_pp)
gc()
exp(4)
exp(7)
exp(9)
exp(10)
exp(11)
load("E:/wind_gust_data/wind_gust_data/pp_data/epc_data.RData")
load("E:/W2W_C5/feature_pp/member/ramefi_probs/ramefi_member_probs_init0_step3.RData")
View(df_probs)
load("E:/W2W_C5/feature_pp/member/ramefi_data/ramefi_member_preds_init0_step3.RData")
View(df_pred)
load("E:/W2W_C5/feature_pp/member/ramefi_probs/ramefi_member_probs_init0_step3.RData")
View(df_probs)
range(init_TM)
range(df_pred$init_tm)
length(unique(df_pred$location))
6*81+2*17
5*81+3*17
4*81+4*17
520/7
456/7
392/7
#### Initiation ####
# Path to of CIENS data
data_path <- "F:/W2W_C5/publication_data/"
# Path to Github repository functions
git_path <- "C:/Users/schulz/Documents/GitHub/CIENS/"
# Load functions
setwd(git_path)
source(file = paste0(git_path, "functions.R"))
# Load additional data
load(file = paste0(git_path, "ciens_meta_data.RData"))
# Load packages
library(lubridate)
library(dplyr)
library(ncdf4)
#### Initiation ####
# Path to of CIENS data
data_path <- "F:/W2W_C5/publication_data/"
# Path to Github repository functions
git_path <- "C:/Users/schulz/Documents/GitHub/CIENS/"
# Load functions
setwd(git_path)
source(file = paste0(git_path, "functions.R"))
# Load additional data
load(file = paste0(git_path, "ciens_meta_data.RData"))
# Load packages
library(lubridate)
library(dplyr)
library(ncdf4)
#### Data set composition ####
# Define initialization times
tm_vec <- init_vec[year(init_vec) == 2016]
met_var_vec
fc_var_vec
View(loc_data)
# Get locations of interest
loc_vec <- loc_data$station_id[
which(is.element(loc_data$station_id, c("Rheinstetten", "Offenbach-Wetterpark")))]
loc_vec
# Get locations of interest
loc_vec <- loc_data$station_id[is.element(loc_data$station_id, c("Rheinstetten", "Offenbach-Wetterpark"))]
# Get locations of interest
loc_vec <- loc_data$station_id[is.element(loc_data$name, c("Rheinstetten", "Offenbach-Wetterpark"))]
tm_vec <- init_vec[year(init_vec) <= 2016]
# Define variables of interest
met_vars <- c("VMAX_10M", "VMAX_10M_MS", "T_2M")
obs_vars <- c("wind_speed_of_gust", "air_temperature")
# Get locations of interest
loc_vec <- loc_data$station_id[is.element(loc_data$name, c("Rheinstetten", "Offenbach-Wetterpark"))]
# Generate data frame for multiple initialization times
df <- bind_rows(lapply(tm_vec, function(x) get_init(tm = x,
dir_path = data_path,
met_vars = met_vars,
obs_vars = obs_vars,
location_vec = loc_vec,
step_vec = c(12:13),
ens_vec = ens_vec)))
#### Data set composition ####
# Define initialization times
tm_vec <- init_vec[(year(init_vec) == 2015) | (year(init_vec) == 2016)]
# Generate data frame for multiple initialization times
df <- bind_rows(lapply(tm_vec, function(x) get_init(tm = x,
dir_path = data_path,
met_vars = met_vars,
obs_vars = obs_vars,
location_vec = loc_vec,
step_vec = c(12:13),
ens_vec = ens_vec)))
#### Exemplary applications ####
### Calculate ensemble statistics
# For-Loop over meteorological variables
for(temp_var in met_vars){
# Calculate ensemble mean and standard deviation for each entry
df[[paste0(temp_var, "_mean")]] <- rowMeans(df[,paste0(temp_var, "_", ens_vec)])
df[[paste0(temp_var, "_sd")]] <- apply(df[,paste0(temp_var, "_", ens_vec)], 1, sd)
}
View(df)
### Generate verification rank histogram
# Required package for rank calculation
library(SpecsVerification)
temp_var <- obs_vars[1]
fc_var <- "VMAX_10M"
rh <- Rankhist(ens = df[,paste0(fc_var, "_", ens_vec)],
obs = df[[temp_var]])
plot(rh)
?Rankhist
?PlotRankhist
# Plotting
PlotRankhist(rank.hist = rh)
# Plotting
PlotRankhist(rank.hist = rh, mode = "prob.paper")
# Plotting
PlotRankhist(rank.hist = rh)
c(temp_var, paste0(fc_var, "_", ens_vec))
df[[paste0(temp_var, "_rank")]] <- apply(df[,c(temp_var, paste0(fc_var, "_", ens_vec))], 1,
function(x){ rank(x, ties = "random")[1] })
?hist
# Call histogram
hist(x = df$wind_speed_of_gust_rank,
breaks = 1:21,
freq = TRUE,
main = "Histogram of wind gust observations")
# Call histogram
hist(x = df$wind_speed_of_gust_rank,
breaks = 1:21,
freq = TRUE,
xlab = "Rank",
names.arg = 1:(n_ens + 1),
main = "Histogram of wind gust observations")
# Call histogram
hist(x = df$wind_speed_of_gust_rank,
breaks = 1:21,
freq = TRUE,
xlab = "Rank",
names.arg = 1:(20 + 1),
main = "Histogram of wind gust observations")
# Call histogram
hist(x = df$wind_speed_of_gust_rank,
breaks = 1:21,
freq = FALSE,
xlab = "Rank",
main = "Histogram of wind gust observations")
hist(x = df[[paste0(temp_var, "_rank")]],
freq = FALSE,
xlab = "Rank",
main = "Histogram of wind gust observations")
# Indicating calibration
abline(h = 1/(length(ens_vec) + 1),
lty = 2,
col = "grey")
?hist
# Call histogram
hist(x = df[[paste0(temp_var, "_rank")]],
breaks = 0.5 + c(0, ens_vec),
freq = FALSE,
xlab = "Rank",
main = "Histogram of wind gust observations")
0.5 + c(0, ens_vec)
# Call histogram
hist(x = df[[paste0(temp_var, "_rank")]],
breaks = length(ens_vec) + 1,
freq = FALSE,
xlab = "Rank",
main = "Histogram of wind gust observations")
# Get ensemble size
n_ens <- sum(ens_vec)
# Frequency of bins
rh <- sapply(1:(n_ens+1), function(i){ sum(i == df[[paste0(temp_var, "_rank")]]) })
# Plot histogram via barplot
barplot(height = rh/sum(rh), # Frequencies
main = temp_var,
xlab = "Rank",
names.arg = 1:(n_ens + 1),
space = 0)
rh
1:(n_ens+1)
n_ens
# Get ensemble size
n_ens <- length(ens_vec)
# Frequency of bins
rh <- sapply(1:(n_ens+1), function(i){ sum(i == df[[paste0(temp_var, "_rank")]]) })
# Plot histogram via barplot
barplot(height = rh/sum(rh), # Frequencies
main = temp_var,
xlab = "Rank",
names.arg = 1:(n_ens + 1),
space = 0)
# Indicating calibration
abline(h = 1/(length(ens_vec) + 1),
lty = 2,
col = "grey")
par(mfrow = c(1, 2))
# Get ensemble size
n_ens <- length(ens_vec)
# For-Loop over observational variables
for(temp_var in obs_vars){
# Get name of corresponding forecast variable
if(temp_var == "wind_speed_of_gust"){ fc_var <- "VMAX_10M" }
else if(temp_var == "air_temperature"){ fc_var <- "T_2M" }
# Calculate ranks
df[[paste0(temp_var, "_rank")]] <- apply(df[,c(temp_var, paste0(fc_var, "_", ens_vec))], 1,
function(x){ rank(x, ties = "random")[1] })
# Frequency of bins
rh <- sapply(1:(n_ens+1), function(i){ sum(i == df[[paste0(temp_var, "_rank")]]) })
# Plot histogram via barplot
barplot(height = rh/sum(rh), # Frequencies
main = temp_var,
xlab = "Rank",
names.arg = 1:(n_ens + 1),
space = 0)
# Call histogram
hist(x = df[[paste0(temp_var, "_rank")]],
breaks = length(ens_vec) + 1,
freq = FALSE,
xlab = "Rank",
main = "Histogram of wind gust observations")
# Indicating calibration
abline(h = 1/(length(ens_vec) + 1),
lty = 2,
col = "grey")
}
dev.off()
# Get ensemble size
n_ens <- length(ens_vec)
# For-Loop over observational variables
for(temp_var in obs_vars){
# Get name of corresponding forecast variable
if(temp_var == "wind_speed_of_gust"){ fc_var <- "VMAX_10M" }
else if(temp_var == "air_temperature"){ fc_var <- "T_2M" }
# Calculate ranks
df[[paste0(temp_var, "_rank")]] <- apply(df[,c(temp_var, paste0(fc_var, "_", ens_vec))], 1,
function(x){ rank(x, ties = "random")[1] })
# Frequency of bins
rh <- sapply(1:(n_ens+1), function(i){ sum(i == df[[paste0(temp_var, "_rank")]]) })
# Plot histogram via barplot
barplot(height = rh/sum(rh), # Frequencies
main = temp_var,
xlab = "Rank",
names.arg = 1:(n_ens + 1),
space = 0)
# Indicating calibration
abline(h = 1/(length(ens_vec) + 1),
lty = 2,
col = "grey")
}
par(mfrow = c(1, 2))
# Get ensemble size
n_ens <- length(ens_vec)
# For-Loop over observational variables
for(temp_var in obs_vars){
# Get name of corresponding forecast variable
if(temp_var == "wind_speed_of_gust"){ fc_var <- "VMAX_10M" }
else if(temp_var == "air_temperature"){ fc_var <- "T_2M" }
# Calculate ranks
df[[paste0(temp_var, "_rank")]] <- apply(df[,c(temp_var, paste0(fc_var, "_", ens_vec))], 1,
function(x){ rank(x, ties = "random")[1] })
# Frequency of bins
rh <- sapply(1:(n_ens+1), function(i){ sum(i == df[[paste0(temp_var, "_rank")]]) })
# Plot histogram via barplot
barplot(height = rh/sum(rh), # Frequencies
main = temp_var,
xlab = "Rank",
names.arg = 1:(n_ens + 1),
space = 0)
# Indicating calibration
abline(h = 1/(length(ens_vec) + 1),
lty = 2,
col = "grey")
}
